<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\PriceService;
use Illuminate\Support\Facades\Log;

class SyncAllPricesCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'prices:sync-all {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ü–µ–Ω—ã –º–µ–∂–¥—É —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –ë–∏—Ç—Ä–∏–∫—Å';

    /**
     * Price service instance
     */
    protected $priceService;

    /**
     * Create a new command instance.
     */
    public function __construct(PriceService $priceService)
    {
        parent::__construct();
        $this->priceService = $priceService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('=== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¶–ï–ù ===');
        $this->info('–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ' . now()->format('Y-m-d H:i:s'));
        
        Log::info('=== –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¶–ï–ù ===');
        Log::info('–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤: ' . now()->format('Y-m-d H:i:s'));
        Log::info('–ó–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑: ' . (app()->runningInConsole() ? 'Console/Cron' : 'Web'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä --force
        if (!$this->option('force') && app()->runningInConsole()) {
            if (!$this->confirm('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Ü–µ–Ω? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.')) {
                $this->info('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
                Log::info('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                return Command::FAILURE;
            }
        }
        
        try {
            $this->info('–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ü–µ–Ω...');
            $this->newLine();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            $result = $this->priceService->syncAllPrices();
            
            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
            $this->displayResults($result);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            Log::info('=== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
            Log::info('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' . json_encode($result['statistics'], JSON_PRETTY_PRINT));
            
            return Command::SUCCESS;
            
        } catch (\Throwable $e) {
            $this->error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω: ' . $e->getMessage());
            $this->error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            
            Log::error('–û–®–ò–ë–ö–ê –ü–†–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¶–ï–ù');
            Log::error('–°–æ–æ–±—â–µ–Ω–∏–µ: ' . $e->getMessage());
            Log::error('–§–∞–π–ª: ' . $e->getFile() . ':' . $e->getLine());
            Log::error('–°—Ç–µ–∫: ' . $e->getTraceAsString());
            
            return Command::FAILURE;
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
     */
    private function displayResults(array $result)
    {
        $stats = $result['statistics'];
        
        $this->info('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        $this->newLine();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', $result['execution_time'] . ' —Å–µ–∫'],
                ['–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', $stats['totalItems']],
                ['–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π', $stats['totalProductRows']],
                ['–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ü–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ', $stats['checkedPrices']],
                ['–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω', $stats['updatedPrices']],
                ['–ü—Ä–æ–ø—É—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', $stats['skippedItems']],
                ['–û—à–∏–±–æ–∫', $stats['errors']],
            ]
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if ($stats['checkedPrices'] > 0) {
            $updatePercentage = round(($stats['updatedPrices'] / $stats['checkedPrices']) * 100, 2);
            $this->info("üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {$updatePercentage}%");
        }
        
        // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        if ($stats['errors'] > 0) {
            $this->warn("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {$stats['errors']} –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.");
        }
        
        $this->newLine();
        $this->info('–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ storage/logs/laravel.log');
    }
}
